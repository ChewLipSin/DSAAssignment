/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package boundary;

import adt.ArrList;
import adt.DoublyLinkedList;
import adt.LinkedListInterface;
import adt.ListInterface;
import adt.OrderClause;
import adt.StackInterface;
import adt.ArrayStack;
import entity.Course;
import entity.CourseProgram;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import utility.Command;
import utility.ConsoleColor;
import utility.InputValue;
import utility.MessageUI;

/**
 *
 * @author Chew Lip Sin
 */
public class CourseGenerateReportMaintenanceUI {

    private LinkedListInterface<CourseProgram> cp = new DoublyLinkedList<>();
    private ListInterface<Course> courses = new ArrList<>();
    private InputValue iv = new InputValue();

    public CourseGenerateReportMaintenanceUI(LinkedListInterface<CourseProgram> cp, ListInterface<Course> courses) {
        this.cp = cp;
        this.courses = courses;
    }

    private final LocalDateTime myDateObj = LocalDateTime.now();
    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    DateTimeFormatter myFormatObj2 = DateTimeFormatter.ofPattern("h:mm a");
    String formattedDate = myDateObj.format(myFormatObj);
    String formattedTime = myDateObj.format(myFormatObj2);

    public void displayHeader() {
        System.out.println("\t\t==============================================");
        System.out.println("\t\t||            Course Report Menu            ||");
        System.out.println("\t\t==============================================");
    }

    public void displayReportMenu() {
        System.out.println("\t\t1. Generate Course and Program Report");
        System.out.println("\t\t2. Generate Course Report");
        System.out.println("\t\t0. Exit");
    }

    public int getChoices() {
        int choice;
        do {
            System.out.print("Enter choice: ");
            choice = iv.readInteger();
            if (choice > 2 || choice < 0) {
                MessageUI.displayInvalidChoiceMessage();
            }
        } while (choice > 2 || choice < 0);
        return choice;
    }

    public void displayCoursePReportHeader() {
        System.out.println("\t\t==============================================");
        System.out.println("\t\t||           Course Program Report           ||");
        System.out.println("\t\t==============================================");
    }

    public void displayCourseReportHeader() {
        System.out.println("\t\t==============================================");
        System.out.println("\t\t||              Course Report                ||");
        System.out.println("\t\t==============================================");
    }

    public void displayCourseProgramReport() {
        String line = "";
        sortByProgramID();
        sortById();
        String oldCC = "";
        System.out.println("");
        System.out.println(String.format("\t%-20s|  %-20s|%-20s", "Course Code", "Program Code", "Main/Elective"));
        for (int i = 0; i < 65; i++) {
            line += "-";
        }
        Iterator<CourseProgram> it = cp.getIterator();
        while (it.hasNext()) {
            CourseProgram cp2 = it.next();
            if (oldCC.equals(cp2.getCourseCode())) {
                System.out.print(String.format("\t%-20s|", ""));
                String elective = strElective(cp2.isIsElective());
                System.out.println(String.format("  %-20s|  %-20s", cp2.getProgramCode(), elective));

            } else {
                System.out.println("\t" + line);
                System.out.print(String.format("\t%-20s|", cp2.getCourseCode()));
                String elective = strElective(cp2.isIsElective());
                System.out.println(String.format("  %-20s|  %-20s", cp2.getProgramCode(), elective));

            }
            oldCC = cp2.getCourseCode();

        }

        System.out.println("\t" + line);
        displayReportFooter();
        System.out.println("");
        Command.pressEnterToContinue();
    }

    public void sortById() {
        cp.orderBy((c1, c2)
                -> c1.getCourseCode().compareTo(c2.getCourseCode()) < 0
                ? OrderClause.MOVE_FORWARD : OrderClause.MOVE_BACKWARD);
    }

    public void sortByProgramID() {
        cp.orderBy((c1, c2)
                -> c1.getProgramCode().compareTo(c2.getProgramCode()) < 0
                ? OrderClause.MOVE_FORWARD : OrderClause.MOVE_BACKWARD);
    }

    private String strElective(boolean isElective) {
        if (isElective == true) {
            return "Elective";
        } else {
            return "Main";
        }

    }

    private void displayReportFooter() {
        System.out.println("\n\tReport Generated by: University Education System");
        System.out.println("\tReport Generated at: " + formattedDate + " " + formattedTime);
    }

    public StackInterface<String> getCourseReportMenu(StackInterface<String> choice) {
        ListInterface<String> typeReport = new ArrList<>();
        ListInterface<String> checkChoice = new ArrList<>();
        boolean checkCode = false;
        boolean checkCredit = false;
        boolean checkSem = false;
        typeReport.add("Course Code Report");
        typeReport.add("Credit Hour Report");
        typeReport.add("Semester Report");

        int choice2;
        do {

            int no = 2;
            System.out.println("\t\t==============================================");
            System.out.println("\t\t||              Course Report Menu          ||");
            System.out.println("\t\t==============================================");
            System.out.println("\t\t1. Course Code Report");
            System.out.println("\t\t2. Credit Hour Report");
            System.out.println("\t\t3. Semester Report");
            System.out.println("\t\t4. Undo");
            System.out.println("\t\t0. Exit/Continue");
            System.out.print("\t\tEnter your choice(One report only choose one time): ");
            choice2 = iv.readInteger();
            if (choice2 < 0 || choice2 > 4) {
                MessageUI.displayInvalidChoiceMessage();
            } else if (choice2 == 1 && !checkCode) {
                choice.push(typeReport.getEntry(0));
                checkCode = true;
            } else if (choice2 == 2 && !checkCredit) {
                choice.push(typeReport.getEntry(1));
                checkCredit = true;
            } else if (choice2 == 3 && !checkSem) {
                choice.push(typeReport.getEntry(2));
                checkSem = true;
            } else if (choice2 == 4) {
                if (!choice.isEmpty()) {
                    String popOut = choice.pop();
                    if (popOut.equals(typeReport.getEntry(0))) {
                        checkCode = false;
                    } else if (popOut.equals(typeReport.getEntry(1))) {
                        checkCredit = false;
                    } else if (popOut.equals(typeReport.getEntry(2))) {
                        checkSem = false;
                    }
                } else {
                    MessageUI.printFormattedText("Nothing can Undo\n", ConsoleColor.YELLOW);
                }
            } else {
                MessageUI.printFormattedText("You have been assigned value into the stack!\n", ConsoleColor.YELLOW);
            }
        } while (choice2 != 0);
        return choice;
    }
}
